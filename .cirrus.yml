env:
  CIRRUS_VAULT_URL: https://vault.sonar.build:8200
  CIRRUS_VAULT_AUTH_PATH: jwt-cirrusci
  CIRRUS_VAULT_ROLE: cirrusci-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}

  ARTIFACTORY_URL: https://repox.jfrog.io/artifactory
  ARTIFACTORY_PRIVATE_USERNAME: vault-${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_DEPLOY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-npm-public-qa
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

only_sonarsource_qa: &ONLY_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

container_definition: &CONTAINER_DEFINITION
  eks_container:
    dockerfile: .cirrus/Dockerfile
    docker_arguments:
      CIRRUS_AWS_ACCOUNT: ${CIRRUS_AWS_ACCOUNT}
    cluster_name: ${CIRRUS_CLUSTER_NAME}
    builder_role: cirrus-builder
    builder_image: docker-builder-v*
    builder_instance_type: t2.small
    region: eu-central-1
    namespace: default
    cpu: 4
    memory: 8G

ec2_instance_definition: &INSTANCE_DEFINITION
  ec2_instance:
    region: eu-central-1
    type: t3.medium
    image: base-windows-jdk17-v*
    platform: windows

build_cache_definition: &BUILD_CACHE_DEFINITION
  build_cache:
    folder: ${CIRRUS_WORKING_DIR}/build
    fingerprint_script: echo $CIRRUS_BUILD_ID
    reupload_on_changes: 'true'

qa_script_definition: &QA_SCRIPT_DEFINITION
  <<: *BUILD_CACHE_DEFINITION
  setup_script:
    - (cd build && npm pack)
    - cp build/sonar-scan-SNAPSHOT.tgz test/integration
    - (cd test/integration && npm install --no-save sonar-scan-SNAPSHOT.tgz)
    - (cd tools/orchestrator && npm run build)
  test_script:
    - ARTIFACTORY_ACCESS_TOKEN=$ARTIFACTORY_DEPLOY_ACCESS_TOKEN npm run test-integration

js_coverage_cache_definition: &JS_COVERAGE_CACHE
  js_coverage_cache:
    folder: ${CIRRUS_WORKING_DIR}/coverage
    fingerprint_script: echo "JS$(git rev-parse HEAD)"
    reupload_on_changes: 'true'

npm_cache_definition: &NPM_CACHE
  npm_cache:
    folder: ${CIRRUS_WORKING_DIR}/node_modules
    fingerprint_script: cat package-lock.json
    populate_script:
      - npm config set //repox.jfrog.io/artifactory/api/npm/:_authToken=${ARTIFACTORY_ACCESS_TOKEN}
      - npm ci

analyze_definition: &ANALYZE_DEFINITION
  <<: *CONTAINER_DEFINITION
  <<: *JS_COVERAGE_CACHE
  <<: *BUILD_CACHE_DEFINITION
  depends_on:
    - build
  analyze_script:
    - node ./scripts/ci-analysis.js

build_task:
  <<: *NPM_CACHE
  <<: *BUILD_CACHE_DEFINITION
  <<: *JS_COVERAGE_CACHE
  <<: *CONTAINER_DEFINITION
  test_script:
    - npm run build
    - npm run test

analyze_SQC_EU_task:
  <<: *ANALYZE_DEFINITION
  #only_if: $CIRRUS_CRON == "nightly"
  env:
    SONAR_TOKEN: VAULT[development/kv/data/sonarcloud data.token]
    SONAR_HOST_URL: https://sonarcloud.io

analyze_next_shadow_task:
  <<: *ANALYZE_DEFINITION
  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube

analyze_SQC_US_shadow_task:
  <<: *ANALYZE_DEFINITION
  #only_if: $CIRRUS_CRON == "nightly"
  env:
    SONAR_TOKEN: VAULT[development/kv/data/sonarqube-us data.token]
    SONAR_HOST_URL: https://sonarqube.us

qa_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *CONTAINER_DEFINITION
  <<: *QA_SCRIPT_DEFINITION

qa_win_task:
  depends_on:
    - build
  <<: *ONLY_SONARSOURCE_QA
  <<: *INSTANCE_DEFINITION
  <<: *QA_SCRIPT_DEFINITION

run_iris_task:
  <<: *CONTAINER_DEFINITION
  #only_if: $CIRRUS_CRON == "nightly"
  depends_on:
    - analyze_next_shadow
    - analyze_SQC_US_shadow
  env:
    SONAR_SOURCE_IRIS_TOKEN: VAULT[development/kv/data/iris data.sqc-eu]
  matrix:
    - name: 'IRIS Sonarcloud.io -> SQ NEXT'
      env:
        SONAR_TARGET_URL: 'https://next.sonarqube.com/sonarqube'
        SONAR_TARGET_IRIS_TOKEN: VAULT[development/kv/data/iris data.next]
    - name: 'IRIS Sonarcloud.io -> SonarQube.us'
      env:
        SONAR_TARGET_URL: https://sonarqube.us
        SONAR_TARGET_IRIS_TOKEN: VAULT[development/kv/data/iris data.sqc-us]
  script:
    - source .cirrus/run-iris.sh

mend_task:
  depends_on:
    - build
  <<: *CONTAINER_DEFINITION
  eks_container:
    cpu: 2
    memory: 2G
  only_if: $CIRRUS_USER_COLLABORATOR == 'true'
  env:
    #    TODO replace secret with vault
    WS_APIKEY: ENCRYPTED[!3929c6148b9dfc751a2d17c590b15d755f82cd9c108f2de5f24a5b32f2a0c26144e921fab7e2c959fc2824d6d6d1550d!]
  run_script:
    - export VERSION=$(git rev-parse HEAD)
    - export WS_PROJECTNAME="${CIRRUS_REPO_FULL_NAME}"
    - export BUILD_NUMBER=${VERSION}
    - source ws_scan.sh
  allow_failures: 'true'
  always:
    mend_artifacts:
      path: 'whitesource/**/*'
